# Override these variables from the commandline, eg 'make DESTDIR=/usr install'
CFLAGS = -g -O2
prefix = /usr/local
bindir = $(prefix)/bin
libdir = $(prefix)/lib
datadir = $(prefix)/share
pkgdatadir = $(datadir)/$(PACKAGE_NAME)
pkglibdir = $(libdir)/$(PACKAGE_NAME)
docdir = $(datadir)/doc
pkgdocdir = $(docdir)/$(PACKAGE_NAME)
includedir = $(prefix)/include
pkgincludedir = $(includedir)/$(PACKAGE_NAME)
lv2plugindir = $(libdir)/lv2
LV2PEG = programs/lv2peg/lv2peg

# Don't modify any variables below this line
UNAME = $(shell uname)


all: really-all


include Makefile.config

-include Makefile.deps


# ARCHIVES

define ARCHIVE_template

# variables
$(2)_SRCPRF = $$(if $$($(2)_SOURCEDIR),$$($(2)_SOURCEDIR),.)
$(2)_BLDPRF = $$(if $$($(2)_BUILDDIR),$$($(2)_BUILDDIR),$$($(2)_SRCPRF))
$(2)_FULLSOURCES = $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_SOURCES))
$(2)_CSOURCES = $$(filter %.c,$$($(2)_FULLSOURCES))
$(2)_CXXSOURCES = $$(filter %.cpp,$$($(2)_FULLSOURCES))
$(2)_COBJECTS = $$(subst .c,.o,$$($(2)_CSOURCES))
$(2)_CXXOBJECTS = $$(subst .cpp,.o,$$($(2)_CXXSOURCES))
$(2)_OBJECTS = $$($(2)_COBJECTS) $$($(2)_CXXOBJECTS)
ALL_OBJECTS += $$($(2)_OBJECTS)
ALL_SOURCES += $$($(2)_FULLSOURCES)
ARCHIVES_REAL += $$($(2)_BLDPRF)/$(1)
ALL_LIBHEADER_INSTALLS += $$(if $$($(2)_HEADERS),install-$(2)-headers)
$(2)_INSTDIR = $$(if $$($(2)_INSTALLDIR),$$($(2)_INSTALLDIR),$(libdir))

# targets
$$($(2)_COBJECTS): Makefile.config
	$(CC) -c -o $$@ -fPIC -DPIC $(CFLAGS) $$($(2)_CFLAGS) $$($$(patsubst %.o,%_c_CFLAGS,$$(notdir $$@))) $$(subst .o,.c,$$@)

$$($(2)_CXXOBJECTS): Makefile.config
	$(CXX) -c -o $$@ -fPIC -DPIC $(CFLAGS) $(CXXFLAGS) $$($(2)_CFLAGS) $$($$(patsubst %.o,%_cpp_CFLAGS,$$(notdir $$@))) $$(subst .o,.cpp,$$@)

$$($(2)_BLDPRF)/$(1): $$($(2)_OBJECTS)
	ar rcs $$@ $$^ $(LDFLAGS) $$($(2)_LDFLAGS)

install-$(2)-headers: $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_HEADERS))
	mkdir -p $(DESTDIR)/$(pkgincludedir)
	cp $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_HEADERS)) $(DESTDIR)/$(pkgincludedir)

install-$(2): $$($(2)_BLDPRF)/$(1) $$(if $$($(2)_HEADERS),install-$(2)-headers)
	mkdir -p $(DESTDIR)/$$($(2)_INSTDIR) && cp $$($(2)_BLDPRF)/$(1) $(DESTDIR)/$$($(2)_INSTDIR)

endef
bad_archives = $(filter-out lib%.a,$(ARCHIVES))
$(foreach badarc, $(bad_archives), $(eval \
  $(error $(badarc): Archive names must begin with 'lib' and end with '.a')))
$(foreach arc,$(ARCHIVES),$(eval $(call ARCHIVE_template,$(arc),$(subst .,_,$(arc)))))

#END OF ARCHIVES


# SHARED LIBRARIES
ifeq ($(UNAME),Darwin)
SHARED_LIBRARY_LDFLAGS = -dynamiclib
SHARED_LIBRARY_CFLAGS = -fno-common
else
SHARED_LIBRARY_LDFLAGS = -shared -fPIC
SHARED_LIBRARY_CFLAGS = -fPIC -DPIC
endif

define LIBRARY_template

# variables
$(2)_SRCPRF = $$(if $$($(2)_SOURCEDIR),$$($(2)_SOURCEDIR),.)
$(2)_BLDPRF = $$(if $$($(2)_BUILDDIR),$$($(2)_BUILDDIR),$$($(2)_SRCPRF))
$(2)_FULLSOURCES = $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_SOURCES))
$(2)_CSOURCES = $$(filter %.c,$$($(2)_FULLSOURCES))
$(2)_CXXSOURCES = $$(filter %.cpp,$$($(2)_FULLSOURCES))
$(2)_COBJECTS = $$(subst .c,.o,$$($(2)_CSOURCES))
$(2)_CXXOBJECTS = $$(subst .cpp,.o,$$($(2)_CXXSOURCES))
$(2)_OBJECTS = $$($(2)_COBJECTS) $$($(2)_CXXOBJECTS)
$(2)_LOCALLIBRARIES = $$(patsubst lib%.so,-l%,$$(notdir $$($(2)_LIBRARIES)))
$(2)_LOCALLDFLAGS = $$(patsubst %,-L%,$$(sort $$(dir $$($(2)_LIBRARIES))))
ALL_OBJECTS += $$($(2)_OBJECTS)
ALL_SOURCES += $$($(2)_FULLSOURCES)
LIBRARIES_REAL += $$($(2)_BLDPRF)/$(1)
LIBRARIES_NOINST += $$(if $$($(2)_NOINST),$(2),)
ALL_LIBHEADER_INSTALLS += $$(if $$($(2)_HEADERS),install-$(2)-headers)
$(2)_INSTDIR = $$(if $$($(2)_INSTALLDIR),$$($(2)_INSTALLDIR),$(libdir))

# targets
$$($(2)_COBJECTS): Makefile.config
	$(CC) -c -o $$@ $(SHARED_LIBRARY_CFLAGS) $(CFLAGS) $$($(2)_CFLAGS) $$(subst .o,.c,$$@)

$$($(2)_CXXOBJECTS): Makefile.config
	$(CXX) -c -o $$@ $(SHARED_LIBRARY_CFLAGS) $(CFLAGS) $(CXXFLAGS) $$($(2)_CFLAGS) $$(subst .o,.cpp,$$@)

$$($(2)_BLDPRF)/$(1): $$($(2)_OBJECTS) $$($(2)_ARCHIVES) $$($(2)_LIBRARIES)
	$(CXX) $(SHARED_LIBRARY_LDFLAGS) $$($(2)_OBJECTS) $$($(2)_LOCALLDFLAGS) $$($(2)_LOCALLIBRARIES) $(LDFLAGS) $$($(2)_LDFLAGS) -o $$@ -Wl,-soname=$(1).0

install-$(2)-headers: $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_HEADERS))
	mkdir -p $(DESTDIR)/$(pkgincludedir)
	cp $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_HEADERS)) $(DESTDIR)/$(pkgincludedir)

install-$(2): $$($(2)_BLDPRF)/$(1) $$(if $$($(2)_HEADERS),install-$(2)-headers)
	mkdir -p $(DESTDIR)/$$($(2)_INSTDIR) && cp $$($(2)_BLDPRF)/$(1) $(DESTDIR)/$$($(2)_INSTDIR)

endef
bad_libraries = $(filter-out lib%.so,$(LIBRARIES))
$(foreach badlib, $(bad_libraries), $(eval \
  $(error $(badlib): Library names must begin with 'lib' and end with '.so')))
$(foreach lib,$(LIBRARIES),$(eval $(call LIBRARY_template,$(lib),$(subst .,_,$(lib)))))
#END OF LIBRARIES


# LV2 PLUGINS
ifeq ($(UNAME),Darwin)
LV2PLUGIN_LDFLAGS = -bundle
LV2PLUGIN_CFLAGS = -fno-common
else
LV2PLUGIN_LDFLAGS = -shared -fPIC
LV2PLUGIN_CFLAGS = -fPIC -DPIC
endif

define LV2_PLUGIN_template

# variables
$(2)_SRCPRF = $$(if $$($(2)_SOURCEDIR),$$($(2)_SOURCEDIR),.)
$(2)_BLDPRF = $$(if $$($(2)_BUILDDIR),$$($(2)_BUILDDIR),$$($(2)_SRCPRF))
$(2)_FULLSOURCES = $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_SOURCES))
$(2)_FULLPEGFILES = $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_PEGFILES))
$(2)_FULLDATA = $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_DATA))
$(2)_CSOURCES = $$(filter %.c,$$($(2)_FULLSOURCES))
$(2)_CXXSOURCES = $$(filter %.cpp,$$($(2)_FULLSOURCES))
$(2)_COBJECTS = $$(subst .c,.o,$$($(2)_CSOURCES))
$(2)_CXXOBJECTS = $$(subst .cpp,.o,$$($(2)_CXXSOURCES))
$(2)_OBJECTS = $$($(2)_COBJECTS) $$($(2)_CXXOBJECTS)
$(2)_LIBNAME = $$($(2)_SRCPRF)/$$(patsubst %.lv2,%.so,$(1))
$(2)_LOCALLIBRARIES = $$(patsubst lib%.so,-l%,$$(notdir $$($(2)_LIBRARIES)))
$(2)_LOCALLDFLAGS = $$(patsubst %,-L%,$$(sort $$(dir $$($(2)_LIBRARIES))))
PROGRAMS += $$($(2)_PROGRAMS)
PROGRAMS_NOINST += $$($(2)_PROGRAMS)
MODULES += $$($(2)_MODULES)
MODULES_NOINST += $$($(2)_MODULES)
ALL_OBJECTS += $$($(2)_OBJECTS) $$($(2)_LIBNAME)
ALL_SOURCES += $$($(2)_FULLSOURCES) $$($(2)_FULLPEGFILES)
ALL_DATA += $$($(2)_FULLDATA)
LV2_PLUGINS_REAL += $$($(2)_BLDPRF)/$(1)
LV2_PLUGINS_NOINST += $$(if $$($(2)_NOINST),$(2),)
$(2)_INSTDIR = $$(if $$($(2)_INSTALLDIR),$$($(2)_INSTALLDIR),$(lv2plugindir))

# targets
$$($(2)_COBJECTS): Makefile.config
	$(CC) -c -o $$@ $(LV2PLUGIN_CFLAGS) $(CFLAGS) $$($(2)_CFLAGS) $$($$(patsubst %.o,%_c_CFLAGS,$$(notdir $$@))) $$(subst .o,.c,$$@)

$$($(2)_CXXOBJECTS): Makefile.config
	$(CXX) -c -o $$@ $(LV2PLUGIN_CFLAGS) $(CFLAGS) $(CXXFLAGS) $$($(2)_CFLAGS) $$($$(patsubst %.o,%_cpp_CFLAGS,$$(notdir $$@))) $$(subst .o,.cpp,$$@)

$$($(2)_LIBNAME): $$($(2)_OBJECTS) $$($(2)_LIBRARIES) $$($(2)_ARCHIVES)
	$(CXX) $(LV2PLUGIN_LDFLAGS) $$($(2)_OBJECTS) $$($(2)_ARCHIVES) $$($(2)_LOCALLDFLAGS) $$($(2)_LOCALLIBRARIES) $(LDFLAGS) $$($(2)_LDFLAGS) -o $$@

$$($(2)_BLDPRF)/$(1): $$($(2)_LIBNAME) $$($(2)_FULLDATA) $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_PROGRAMS)) $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_MODULES))
	rm -rf $$($(2)_BLDPRF)/$(1)
	mkdir $$($(2)_BLDPRF)/$(1)
	cp $$($(2)_LIBNAME) $$($(2)_BLDPRF)/$(1)
	$$(if $$($(2)_PROGRAMS),cp $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_PROGRAMS)) $$($(2)_BLDPRF)/$(1),)
	$$(if $$($(2)_MODULES),cp $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_MODULES)) $$($(2)_BLDPRF)/$(1),)
	$$(if $$($(2)_FULLDATA),cp $$($(2)_FULLDATA) $$($(2)_BLDPRF)/$(1), )

install-$(2): $$($(2)_BLDPRF)/$(1) $$(if $$($(2)_HEADERS),install-$(2)-headers)
	rm -rf $(DESTDIR)/$$($(2)_INSTDIR)/$(1)
	mkdir -p $(DESTDIR)/$$($(2)_INSTDIR) && cp -R $$($(2)_BLDPRF)/$(1) $(DESTDIR)/$$($(2)_INSTDIR)

endef
$(foreach lv2,$(LV2_PLUGINS),$(eval $(call LV2_PLUGIN_template,$(lv2),$(subst .,_,$(lv2)))))

# PEG target
%.peg: %.ttl $(LV2PEG)
	$(LV2PEG) $*.ttl $@

# END OF LV2 PLUGINS


# EXECUTABLE PROGRAMS
define PROGRAM_template

# variables
$(1)_SRCPRF = $$(if $$($(1)_SOURCEDIR),$$($(1)_SOURCEDIR),.)
$(1)_BLDPRF = $$(if $$($(1)_BUILDDIR),$$($(1)_BUILDDIR),$$($(1)_SRCPRF))
$(1)_FULLSOURCES = $$(patsubst %,$$($(1)_SRCPRF)/%,$$($(1)_SOURCES))
$(1)_CSOURCES = $$(filter %.c,$$($(1)_FULLSOURCES))
$(1)_CXXSOURCES = $$(filter %.cpp,$$($(1)_FULLSOURCES))
$(1)_COBJECTS = $$(subst .c,.o,$$($(1)_CSOURCES))
$(1)_CXXOBJECTS = $$(subst .cpp,.o,$$($(1)_CXXSOURCES))
$(1)_OBJECTS = $$($(1)_COBJECTS) $$($(1)_CXXOBJECTS)
$(1)_LOCALLIBRARIES = $$(patsubst lib%.so,-l%,$$(notdir $$($(1)_LIBRARIES)))
$(1)_LOCALLDFLAGS = $$(patsubst %,-L%,$$(sort $$(dir $$($(1)_LIBRARIES)))) 
ALL_OBJECTS += $$($(1)_OBJECTS)
ALL_SOURCES += $$($(1)_FULLSOURCES)
PROGRAMS_REAL += $$($(1)_BLDPRF)/$(1)
PROGRAMS_NOINST += $$(if $$($(1)_NOINST),$(1),)

# targets
$$($(1)_COBJECTS): Makefile.config
	$(CC) -c -o $$@ $(CFLAGS) $$($(1)_CFLAGS) $$($$(patsubst %.o,%_c_CFLAGS,$$(notdir $$@))) $$(subst .o,.c,$$@)

$$($(1)_CXXOBJECTS): Makefile.config
	$(CXX) -c -o $$@ $(CFLAGS) $(CXXFLAGS) $$($(1)_CFLAGS) $$($$(patsubst %.o,%_cpp_CFLAGS,$$(notdir $$@))) $$(subst .o,.cpp,$$@)

$$($(1)_BLDPRF)/$(1): $$($(1)_OBJECTS) $$($(1)_LIBRARIES) $$($(1)_ARCHIVES)
	$(CXX) $$($(1)_OBJECTS) $$($(1)_ARCHIVES) $$($(1)_LOCALLDFLAGS) $$($(1)_LOCALLIBRARIES) $$($(1)_LDFLAGS) $(LDFLAGS) -o $$@

install-$(1)-headers: $$(patsubst %,$$($(1)_SRCPRF)/%,$$($(1)_HEADERS))
	mkdir -p $(DESTDIR)/$(pkgincludedir)
	cp $$(patsubst %,$$($(1)_SRCPRF)/%,$$($(1)_HEADERS)) $(DESTDIR)/$(pkgincludedir)

install-$(1): $$($(1)_BLDPRF)/$(1) $$(if $$($(1)_HEADERS),install-$(1)-headers)
	mkdir -p $(DESTDIR)/$(bindir) && cp $$($(1)_BLDPRF)/$(1) $(DESTDIR)/$(bindir)
endef
$(foreach prog,$(PROGRAMS),$(eval $(call PROGRAM_template,$(prog))))
# END OF PROGRAMS


# RUNTIME LOADABLE MODULES
ifeq ($(UNAME),Darwin)
MODULE_LDFLAGS = -bundle
MODULE_CFLAGS = -fno-common
else
MODULE_LDFLAGS = -shared -fPIC
MODULE_CFLAGS = -fPIC -DPIC
endif

define MODULE_template

# variables
$(2)_SRCPRF = $$(if $$($(2)_SOURCEDIR),$$($(2)_SOURCEDIR),.)
$(2)_BLDPRF = $$(if $$($(2)_BUILDDIR),$$($(2)_BUILDDIR),$$($(2)_SRCPRF))
$(2)_FULLSOURCES = $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_SOURCES))
$(2)_CSOURCES = $$(filter %.c,$$($(2)_FULLSOURCES))
$(2)_CXXSOURCES = $$(filter %.cpp,$$($(2)_FULLSOURCES))
$(2)_COBJECTS = $$(subst .c,.o,$$($(2)_CSOURCES))
$(2)_CXXOBJECTS = $$(subst .cpp,.o,$$($(2)_CXXSOURCES))
$(2)_OBJECTS = $$($(2)_COBJECTS) $$($(2)_CXXOBJECTS)
$(2)_LOCALLIBRARIES = $$(patsubst lib%.so,-l%,$$(notdir $$($(2)_LIBRARIES)))
$(2)_LOCALLDFLAGS = $$(patsubst %,-L%,$$(sort $$(dir $$($(2)_LIBRARIES))))
ALL_OBJECTS += $$($(2)_OBJECTS)
ALL_SOURCES += $$($(2)_FULLSOURCES)
$(2)_INSTDIR = $$(if $$($(2)_INSTALLDIR),$$($(2)_INSTALLDIR),$(pkglibdir))
MODULES_REAL += $$($(2)_BLDPRF)/$(1)
MODULES_NOINST += $$(if $$($(2)_NOINST),$(2),)

# targets
$$($(2)_COBJECTS): Makefile.config
	$(CC) -c -o $$@ $(MODULE_CFLAGS) $(CFLAGS) $$($(2)_CFLAGS) $$($$(patsubst %.o,%_c_CFLAGS,$$(notdir $$@))) $$(subst .o,.c,$$@)

$$($(2)_CXXOBJECTS): Makefile.config
	$(CXX) -c -o $$@ $(MODULE_CFLAGS) $(CFLAGS) $(CXXFLAGS) $$($(2)_CFLAGS) $$($$(patsubst %.o,%_cpp_CFLAGS,$$(notdir $$@))) $$(subst .o,.cpp,$$@)

$$($(2)_BLDPRF)/$(1): $$($(2)_OBJECTS) $$($(2)_LIBRARIES) $$($(2)_ARCHIVES)
	$(CXX) $(MODULE_LDFLAGS) $$($(2)_OBJECTS) $$($(2)_LOCALLDFLAGS) $$($(2)_LOCALLIBRARIES) $$($(2)_ARCHIVES) $(LDFLAGS) $$($(2)_LDFLAGS) -o $$@

install-$(2)-headers: $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_HEADERS))
	mkdir -p $(DESTDIR)/$(pkgincludedir)
	cp $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_HEADERS)) $(DESTDIR)/$(pkgincludedir)

install-$(2): $$($(2)_BLDPRF)/$(1) $$(if $$($(2)_HEADERS),install-$(2)-headers)
	mkdir -p $(DESTDIR)/$$($(2)_INSTDIR) && cp $$($(2)_BLDPRF)/$(1) $(DESTDIR)/$$($(2)_INSTDIR)

endef
$(foreach mod,$(MODULES),$(eval $(call MODULE_template,$(mod),$(subst .,_,$(mod)))))
# END OF RUNTIME LOADABLE MODULES


# DATA PACKS
define DATAPACK_template

# variables
$(2)_SRCPRF = $$(if $$($(2)_SOURCEDIR),$$($(2)_SOURCEDIR),.)
$(2)_FULLFILES = $$(patsubst %,$$($(2)_SRCPRF)/%,$$($(2)_FILES))
ALL_DATA += $$($(2)_FULLFILES)
$(2)_INSTDIR = $$(if $$($(2)_INSTALLDIR),$$($(2)_INSTALLDIR),$(pkgdatadir))

# targets
install-$(2): $$($(2)_FULLFILES)
	$(if $$($(2)_FULLFILES),mkdir -p $(DESTDIR)/$$($(2)_INSTDIR) && cp $$($(2)_FULLFILES) $(DESTDIR)/$$($(2)_INSTDIR))

endef
$(foreach pack,$(DATAPACKS),$(eval $(call DATAPACK_template,$(pack),$(subst .,_,$(pack)))))
# END OF DATA PACKS


# START HERE
really-all: $(if $(PKG_DEPS),check-pkg-deps) $(ARCHIVES_REAL) $(LIBRARIES_REAL) $(PROGRAMS_REAL) $(MODULES_REAL) $(LV2_PLUGINS_REAL)



# DEPENDENCY COMPUTATION
DEP_SOURCES = $(filter %.c,$(ALL_SOURCES)) $(filter %.cpp,$(ALL_SOURCES))
DEP_FILES = $(patsubst %,%.dep,$(DEP_SOURCES))
DEPDIRS = $(shell for i in . */ */*/ */*/*/ */*/*/*/; do echo -n " -I$$i"; done)
%.dep: %
	@echo -n Generating dependencies for $<...
	@echo -n .
	@$(CC) -MM $(DEPDIRS) $(PKG_DEPDIRS) -MT $(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$<)) -o $@ $<
	@$(CC) -MM $(DEPDIRS) $(PKG_DEPDIRS) -MT $@ -o $@.dep $<
	@cat $@.dep >> $@
	@rm -f $@.dep
	@echo .

Makefile.deps: $(DEP_FILES)
	@echo -n Merging dependencies...
	@rm -f Makefile.deps
	@$(foreach dep,$(DEP_FILES),cat $(dep) >> Makefile.deps && ) true
	@echo .

# GLOBAL CLEAN
clean:
	rm -rf $(ALL_OBJECTS) $(PROGRAMS_REAL) $(MODULES_REAL) $(LIBRARIES) $(ARCHIVES_REAL) $(LV2_PLUGINS_REAL) $(DEP_FILES)


# GLOBAL INSTALL
PROGRAMS_INST = $(filter-out $(PROGRAMS_NOINST),$(PROGRAMS))
install-programs: $(patsubst %,install-%,$(subst .,_,$(PROGRAMS_INST)))

MODULES_INST = $(filter-out $(MODULES_NOINST),$(MODULES))
install-modules: $(patsubst %,install-%,$(subst .,_,$(MODULES_INST)))

LIBRARIES_INST = $(filter-out $(LIBRARIES_NOINST),$(LIBRARIES))
install-libraries: $(patsubst %,install-%,$(subst .,_,$(LIBRARIES_INST)))
	$(if $(LIBRARIES),ldconfig -n $(libdir))

LV2_PLUGINS_INST = $(filter-out $(LV2_PLUGINS_NOINST),$(LV2_PLUGINS))
install-lv2-plugins: $(patsubst %,install-%,$(subst .,_,$(LV2_PLUGINS_INST)))

install-data: $(DATA)
	$(if $(DATA),mkdir -p $(DESTDIR)/$(pkgdatadir))
	$(if $(DATA),cp $(DATA) $(DESTDIR)/$(pkgdatadir))

install-docs: $(DOCS)
	$(if $(DOCS),mkdir -p $(DESTDIR)/$(pkgdocdir))
	$(if $(DOCS),cp $(DOCS) $(DESTDIR)/$(pkgdocdir))

install-pcfiles: $(PCFILES)
	$(if $(PCFILES),mkdir -p $(DESTDIR)/$(libdir)/pkgconfig)
	$(if $(PCFILES),@echo Installing pkg-config-files...)
	@$(foreach pcf,$(PCFILES),echo PACKAGE_NAME = $(PACKAGE_NAME) > $(DESTDIR)/$(libdir)/pkgconfig/$(pcf) &&) true
	@$(foreach pcf,$(PCFILES),echo PACKAGE_VERSION = $(PACKAGE_VERSION) >> $(DESTDIR)/$(libdir)/pkgconfig/$(pcf) &&) true
	@$(foreach pcf,$(PCFILES),echo libdir = $(libdir) >> $(DESTDIR)/$(libdir)/pkgconfig/$(pcf) &&) true
	@$(foreach pcf,$(PCFILES),echo pkglibdir = $(pkglibdir) >> $(DESTDIR)/$(libdir)/pkgconfig/$(pcf) &&) true
	@$(foreach pcf,$(PCFILES),echo includedir = $(includedir) >> $(DESTDIR)/$(libdir)/pkgconfig/$(pcf) &&) true
	@$(foreach pcf,$(PCFILES),echo pkgincludedir = $(pkgincludedir) >> $(DESTDIR)/$(libdir)/pkgconfig/$(pcf) &&) true
	@$(foreach pcf,$(PCFILES),cat $(pcf) >> $(DESTDIR)/$(libdir)/pkgconfig/$(pcf) &&) true

install-datapacks: $(patsubst %,install-%,$(subst .,_,$(DATAPACKS)))

install: install-libraries install-modules install-programs install-lv2-plugins install-data install-docs install-pcfiles install-datapacks


# DISTRIBUTION
THIS_FILE = $(patsubst ./%,%,$(firstword $(filter %/Makefile.template,$(patsubst %,./%,$(MAKEFILE_LIST)))))
CONFIGURE_SCRIPT = $(if $(__path_to_configure),$(__path_to_configure),configure)
ALL_DIST_FILES = $(ALL_SOURCES) $(DATA) $(DOCS) $(EXTRA_DIST) $(ALL_DATA)
dist: 
	rm -rf $(PACKAGE_NAME)-$(PACKAGE_VERSION)
	rm -rf $(PACKAGE_NAME)-$(PACKAGE_VERSION).tar.bz2
	rm -rf $(PACKAGE_NAME)-$(PACKAGE_VERSION).tar
	mkdir -p $(PACKAGE_NAME)-$(PACKAGE_VERSION)
	@echo "Copying files to $(PACKAGE_NAME)-$(PACKAGE_VERSION)/..."
	cp $(THIS_FILE) $(CONFIGURE_SCRIPT) $(PACKAGE_NAME)-$(PACKAGE_VERSION)
	cat Makefile | sed s/$(subst /,\\/,$(THIS_FILE))/Makefile.template/ > $(PACKAGE_NAME)-$(PACKAGE_VERSION)/Makefile
	@$(foreach file, $(patsubst %,./%,$(ALL_DIST_FILES)), mkdir -p $(PACKAGE_NAME)-$(PACKAGE_VERSION)/`echo $(file) | sed 's/\/[^\/]*$$//'` &&) true
	@$(foreach file, $(ALL_DIST_FILES), cp $(file) $(PACKAGE_NAME)-$(PACKAGE_VERSION)/$(file) &&) true
	touch $(PACKAGE_NAME)-$(PACKAGE_VERSION)/Makefile.config
	tar c $(PACKAGE_NAME)-$(PACKAGE_VERSION) > $(PACKAGE_NAME)-$(PACKAGE_VERSION).tar
	rm -rf $(PACKAGE_NAME)-$(PACKAGE_VERSION)
	bzip2 $(PACKAGE_NAME)-$(PACKAGE_VERSION).tar


# PKG-CONFIG DEPENDENCY CHECK
PKG_DEPDIRS = `pkg-config --cflags $(filter-out =%,$(subst >, ,$(PKG_DEPS))) 2> /dev/null`
check-pkg-deps:
	@$(foreach pkg, $(PKG_DEPS), if pkg-config --atleast-version $(sort $(subst >=, ,$(pkg))) ; then true; else echo "*** You don't have $(pkg), which you need in order to build this software."; false; fi && ) true


