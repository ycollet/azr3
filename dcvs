#!/usr/bin/perl

# change these parameters if you are using this script for your own project
my $project = "ll-plugins";
my $module = "azr3-lv2";
my $user = "larsl";
my $module_dir = "/sources/$project/$module";

# make sure that this is a commit
$is_commit = 0;
foreach (@ARGV) {
  if ($_ eq 'ci' || $_ eq 'commit') {
    $is_commit = 1;
    last;
  }
}
if ($is_commit == 0) {
  print "This is not a CVS commit!\n";
  exit;
}


# modify the version in the makefile
system 'cp Makefile Makefile.bak';
open MAKEFILE_BAK, "<Makefile.bak";
open MAKEFILE, ">Makefile";
my $version = "";
while (<MAKEFILE_BAK>) {
  if (/PACKAGE_VERSION\ =\ ([0-9]+)\.([0-9]+)\.(-?[0-9]+)/) {
    $old_version = "$1.$2.$3";
    $version = "$1.$2." . ($3 + 1);
    print MAKEFILE "PACKAGE_VERSION = $version\n";
    print "Updating version to $version\n";
  }
  else {
    print MAKEFILE $_;
  }
}
close MAKEFILE_BAK;
close MAKEFILE;


# find out which files have changed
@files = ();
$nfiles = 0;
@lines = `(cvs diff -u | grep "RCS file") 2> /dev/null`;
foreach $line (@lines) {
  if ($line =~ /^RCS file: $module_dir\/(.*),v$/) {
    $files[$nfiles++] = $1;
  }
}


# if the CVS command fails, copy the backup back in place
if (system('cvs', @ARGV) != 0) {
  system 'cp Makefile.bak Makefile';
  exit;
}


# The code below is adapted from Petr Baudis's ciabot_cvs.pl


# Get log message
$next = 0;
foreach $arg (@ARGV) {
  if ($next == 1) {
    $logmsg = "$version: $arg";
    break;
  }
  if ($arg eq "-m") {
    $next = 1;
  }
}


# Compose the RPC message
my $ts = time;

$message = <<EM
<message>
   <generator>
       <name>dcvs</name>
       <version>$version</version>
   </generator>
   <source>
       <project>$project</project>
       <module>$module</module>
   </source>
   <timestamp>
       $ts
   </timestamp>
   <body>
       <commit>
           <author>$user</author>
           <files>
EM
;

foreach $file (@files) {
  $message .= "              <file>$file</file>\n";
}

$message .= <<EM
           </files>
           <log>
$logmsg
           </log>
       </commit>
   </body>
</message>
EM
;


### Send out the XML-RPC message


# We gotta be careful from now on. We silence all the warnings because
# RPC::XML code is crappy and works with undefs etc.
$^W = 0;
$RPC::XML::ERROR if (0); # silence perl's compile-time warning

require RPC::XML;
require RPC::XML::Client;

my $rpc_client = new RPC::XML::Client 'http://cia.vc/RPC2';
my $rpc_request = RPC::XML::request->new('hub.deliver', $message);
my $rpc_response = $rpc_client->send_request($rpc_request);

unless (ref $rpc_response) {
  die "XML-RPC Error: $RPC::XML::ERROR\n";
}


